<template>
  <div class="demo-page" onclick="handleScreenTap">
    <text class="clock">{{ clock }}</text>
    <text class="title">{{ navigationInfo.direction || "等待導航開始" }}</text>
    <text class="subtitle">{{ navigationInfo.turnDirection }}</text>
    <text class="distance">{{ navigationInfo.turnDistance }}</text>
  </div>
</template>

<script>
import router from "@system.router"
import configuration from "@system.configuration"
import brightness from '@system.brightness'
import navigationDict from '../../i18n/navigation.json'

// 動態導入 interconnect
let interconnect
try {
  interconnect = require('@system.interconnect')
} catch (e) {
  // 忽略錯誤，允許應用在模擬器中運行
}

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {
    navigationInfo: {
      turnDirection: "",
      direction: "",
      turnDistance: ""
    },
    conn: null,
    isSimulator: false,
    isDemoMode: true, // 添加演示模式標誌
    maxBrightness: 255,
    midBrightness: 128,
    screenTimeout: null,
    demoDataIndex: 0, // 用於循環演示數據
    demoData: [ // 演示用的導航數據
      { turnDirection: "left", direction: "中正路/新北市特一號道路", turnDistance: "100公尺" },
      { turnDirection: "right", direction: "連城路/新生街", turnDistance: "50公尺" },
      { turnDirection: "straight", direction: "飄向遠方", turnDistance: "200公尺" },
      { turnDirection: "UTurnLeft", direction: "前方", turnDistance: "30公尺" },
      { turnDirection: "Roundabout", direction: "進入圓環", turnDistance: "150公尺" },
      { turnDirection: "Exit1st", direction: "圓環第一出口", turnDistance: "80公尺" },
      { turnDirection: "DestinationFront", direction: "目的地就在前方", turnDistance: "10公尺" }
    ],
    clock: '',
    clockInterval: null,
  },

  onInit() {
    // 初始化導航信息
    this.navigationInfo = {
      turnDirection: "",
      direction: "",
      turnDistance: ""
    }
    
    // 檢測是否為模擬器
    try {
      // 嘗試獲取亮度值，如果失敗則認為是模擬器
      brightness.getValue({
        success: () => {
          this.isSimulator = false
          console.log('運行在真實設備上')
        },
        fail: () => {
          this.isSimulator = true
          console.log('運行在模擬器上')
          if (this.isDemoMode) {
            this.startDemoMode()
          }
        }
      })
    } catch (e) {
      this.isSimulator = true
      console.log('運行在模擬器上（捕獲到異常）')
      if (this.isDemoMode) {
        this.startDemoMode()
      }
    }
    
    // 如果不是模擬器，則初始化連接
    if (!this.isSimulator) {
      try {
        this.conn = interconnect.instance()
        this.conn.onmessage = (data) => {
          try {
            if (typeof data.data === 'string') {
              const navigationData = JSON.parse(data.data)
              this.receiveNavigationInfo(navigationData)
              this.handleScreenTap()
            } else if (typeof data.data === 'object') {
              this.receiveNavigationInfo(data.data)
              this.handleScreenTap()
            }
          } catch (e) {
            console.log('解析消息失敗: ' + e.message)
          }
        }
      } catch (e) {
        console.log('初始化連接失敗: ' + e.message)
      }
    }

    // 啟動時鐘
    this.updateClock()
    this.clockInterval = setInterval(() => {
      this.updateClock()
    }, 30000) // 每30秒更新一次
  },

  onShow() {
    // 頁面顯示時設置半亮並保持常亮
    if (!this.isSimulator) {
      this.setKeepScreenOn(true)
      this.setHalfBrightness()
    }
  },

  onHide() {
    // 清除計時器
    if (this.screenTimeout) {
      clearTimeout(this.screenTimeout)
      this.screenTimeout = null
    }
  },

  onDestroy() {
    // 清除計時器
    if (this.screenTimeout) {
      clearTimeout(this.screenTimeout)
      this.screenTimeout = null
    }
    // 恢復屏幕亮度設置
    this.restoreBrightness()

    // 清除時鐘計時器
    if (this.clockInterval) {
      clearInterval(this.clockInterval)
      this.clockInterval = null
    }
  },

  // 設置保持屏幕常亮
  setKeepScreenOn(keepOn) {
    try {
      brightness.setKeepScreenOn({
        keepScreenOn: keepOn,
        success: function() {
          console.log('設置屏幕常亮成功')
        },
        fail: function(data, code) {
          console.log('設置屏幕常亮失敗, code = ' + code)
        }
      })
    } catch (e) {
      console.log('設置屏幕常亮時發生錯誤: ' + e.message)
    }
  },

  // 設置全亮
  setFullBrightness() {
    try {
      brightness.setValue({
        value: this.maxBrightness,
        success: function() {
          console.log('設置全亮成功')
        },
        fail: function(data, code) {
          console.log('設置全亮失敗, code = ' + code)
        }
      })
    } catch (e) {
      console.log('設置全亮時發生錯誤: ' + e.message)
    }
  },

  // 設置半亮
  setHalfBrightness() {
    try {
      brightness.setValue({
        value: this.midBrightness,
        success: function() {
          console.log('設置半亮成功')
        },
        fail: function(data, code) {
          console.log('設置半亮失敗, code = ' + code)
        }
      })
    } catch (e) {
      console.log('設置半亮時發生錯誤: ' + e.message)
    }
  },

  // 恢復原始亮度設置
  restoreBrightness() {
    brightness.setMode({
      mode: 0, // 手動模式
      success: function() {
        console.log('恢復亮度模式成功')
      },
      fail: function(data, code) {
        console.log('恢復亮度模式失敗, code = ' + code)
      }
    })
  },

  // 處理屏幕點擊，設置全亮5秒然後恢復半亮
  handleScreenTap() {
    // 清除已有的計時器
    if (this.screenTimeout) {
      clearTimeout(this.screenTimeout)
      this.screenTimeout = null
    }
    
    // 設置全亮
    this.setFullBrightness()
    
    // 5秒後恢復半亮
    this.screenTimeout = setTimeout(() => {
      this.setHalfBrightness()
      this.screenTimeout = null
    }, 5000)
  },

  // 接收導航信息
  receiveNavigationInfo(data) {
    if (data.turnDirection !== undefined && data.direction !== undefined && data.turnDistance !== undefined) {
      // 如果原始導航指令是英文代碼，將其轉換為中文顯示
      if (navigationDict[data.turnDirection]) {
        data.turnDirection = navigationDict[data.turnDirection]
      }
      this.navigationInfo = data
    }
  },

  // 啟動演示模式
  startDemoMode() {
    console.log('啟動演示模式')
    // 立即顯示第一組數據
    this.receiveNavigationInfo(this.demoData[this.demoDataIndex])
    
    // 每5秒切換一次數據
    setInterval(() => {
      this.demoDataIndex = (this.demoDataIndex + 1) % this.demoData.length
      this.receiveNavigationInfo(this.demoData[this.demoDataIndex])
      console.log('切換演示數據: ' + JSON.stringify(this.demoData[this.demoDataIndex]))
    }, 5000)
  },

  // 更新時鐘
  updateClock() {
    const now = new Date()
    const h = now.getHours().toString().padStart(2, '0')
    const m = now.getMinutes().toString().padStart(2, '0')
    this.clock = `${h}:${m}`
  },
}
</script>

<style>
.demo-page {
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 20px;
  background-color: black;
  width: 100%;
  height: 100%;
}

.direction-container {
  width: 100%;
  justify-content: center;
  align-items: center;
  margin-bottom: 20px;
}

/* 道路 */
.title {
  font-size: 30px;
  text-align: center;
  margin-bottom: 10px;
  color: #FFFFFF;
}
/* 方向 */
.subtitle {
  font-size: 50px;
  max-width: 192px;
  text-align: center;
  margin: 20px 0;
  color: #FFFFFF;
  width: 100%;
  text-overflow: ellipsis;
  max-lines: 1;
  font-weight: bold;
} 
/* 距離 */
.distance {
  font-size: 35px;
  text-align: center;
  margin-bottom: 10px;
  color: #FFFFFF;
}
/* 時鐘 */
.clock {
  font-size: 40px;
  color: #00FF00;
  text-align: center;
  margin-bottom: 20px;
}
</style>

